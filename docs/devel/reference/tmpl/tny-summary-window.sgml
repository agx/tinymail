<!-- ##### SECTION Title ##### -->
TnySummaryWindow

<!-- ##### SECTION Short_Description ##### -->
A demo implementation of #TnySummaryWindowIface for Gtk+

<!-- ##### SECTION Long_Description ##### -->
<para>
A demo implementation of a summary window. Implemented for Gtk+.
</para><para>
The implementation claims to also be a #TnyAccountStoreViewIface implementation.
Which is, of course, perfectly legal. It's possible that a summary window is a
view for the account store.
</para><para>
You can, however, also do it more finegrained and create a real view type that
implements the #TnyAccountStoreViewIface. And you can let the summary window
for example decorate that. Or simply goes in a composition relation with that
type. In a human language: embed the view type in the summary window.
</para><para>
The demo-ui, however, implements the summary window *as* the view type. The 
main reason for this is because that reduces the amount of code. People might
other wise get scared about having to implement a lot own GObjects if they
want to use the tinymail framework. This isn't true. 
</para><para>
But that doesn't mean the scared people are right. It's probably more correct
to implement a type as a #TnyAccountStoreViewIface and put it in composition
with the #TnySummaryWindowIface implementation.
</para><para>
Mine is just a simple demo.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>
#TnyAccountStoreViewIface, #TnySummaryWindowIface, #TnyAccountStoreIface
</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### STRUCT TnySummaryWindow ##### -->
<para>

</para>

@parent: 

<!-- ##### FUNCTION tny_summary_window_new ##### -->
<para>

</para>

@Returns: 


