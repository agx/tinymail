<!-- ##### SECTION Title ##### -->
TnySendQueue

<!-- ##### SECTION Short_Description ##### -->
A type for sending mail

<!-- ##### SECTION Long_Description ##### -->
<para>
A type for sending mail. Typically using a #TnyTransportAccount. The send queue will asynchonously handle 
sending the queued E-mails. It will signal when a message got sent. While the queue is busy, it permits
adding new messages to it.
</para>
<para>
The #TnySendQueue implementation does not necessarily have to classify between multiple #TnyTransportAccount 
nor is it specified that it should not do this. The contract for the type is that it WILL send the message.
</para>
<para>
It's recommended to make implementations that persist to-send messages on a persistent storage like a 
filesystem. For example in a so called Outbox folder. Else would your user upon application or device 
shutdown obviously lose the unsent messages.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>
#TnyTransportAccount
</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### STRUCT TnySendQueue ##### -->
<para>

</para>


<!-- ##### SIGNAL TnySendQueue::error-happened ##### -->
<para>

</para>

@tnysendqueue: the object which received the signal.
@arg1: 
@arg2: 
@arg3: 

<!-- ##### SIGNAL TnySendQueue::msg-sent ##### -->
<para>

</para>

@tnysendqueue: the object which received the signal.
@arg1: 
@arg2: 
@arg3: 

<!-- ##### STRUCT TnySendQueueIface ##### -->
<para>

</para>

@parent: 
@msg_sent: 
@error_happened: 
@add_func: 
@get_sentbox_func: 
@get_outbox_func: 
@cancel_func: 

<!-- ##### FUNCTION tny_send_queue_add ##### -->
<para>

</para>

@self: 
@msg: 


<!-- ##### FUNCTION tny_send_queue_get_sentbox ##### -->
<para>

</para>

@self: 
@Returns: 


<!-- ##### FUNCTION tny_send_queue_get_outbox ##### -->
<para>

</para>

@self: 
@Returns: 


<!-- ##### FUNCTION tny_send_queue_cancel ##### -->
<para>

</para>

@self: 
@remove: 


