<!-- ##### SECTION ./tmpl/tny-folder-iface-test.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/tny-folder-iface-test.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/tny-folder-iface-test.sgml:Short_Description ##### -->



<!-- ##### SECTION ./tmpl/tny-folder-iface-test.sgml:Stability_Level ##### -->



<!-- ##### SECTION ./tmpl/tny-folder-iface-test.sgml:Title ##### -->
tny-folder-iface-test


<!-- ##### SECTION ./tmpl/tny-msg-folder-proxy.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/tny-msg-folder-proxy.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/tny-msg-folder-proxy.sgml:Short_Description ##### -->



<!-- ##### SECTION ./tmpl/tny-msg-folder-proxy.sgml:Stability_Level ##### -->



<!-- ##### SECTION ./tmpl/tny-msg-folder-proxy.sgml:Title ##### -->
TnyMsgFolderProxy


<!-- ##### SECTION ./tmpl/tny-msg-folder.sgml:Long_Description ##### -->
<para>
A #TnyMsgFolderIface proxy for the #CamelFolder type in Camel.

It's recommended to launch the uncache method on instances of
this type once the instance is no longer actively used. Doing so
will dramatically reduce memory usage. Doing it too early will
cause a reload of folder data (it will slow things down).
</para><para>
For example when a new folder becomes the visible or active folder,
you can launch the uncache method on the old folder instance. You
shouldn't destroy the instance as the #TnyStoreAccount implementation
for camel is the type that keeps track of instances of this type.
But you can uncache them.
</para><para>
This type is coupled with the #TnyStoreAccount implementation for
Camel.
</para>


<!-- ##### SECTION ./tmpl/tny-msg-folder.sgml:See_Also ##### -->
<para>
#TnyMsgFolderIface, #CamelFolder, #TnyStoreAccount, #TnyStoreAccountIface
</para>


<!-- ##### SECTION ./tmpl/tny-msg-folder.sgml:Short_Description ##### -->
A Camel #TnyMsgFolderIface implementation


<!-- ##### SECTION ./tmpl/tny-msg-folder.sgml:Stability_Level ##### -->



<!-- ##### SECTION ./tmpl/tny-msg-folder.sgml:Title ##### -->
TnyMsgFolder


<!-- ##### SECTION ./tmpl/tny-msg-header-proxy.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/tny-msg-header-proxy.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/tny-msg-header-proxy.sgml:Short_Description ##### -->



<!-- ##### SECTION ./tmpl/tny-msg-header-proxy.sgml:Stability_Level ##### -->



<!-- ##### SECTION ./tmpl/tny-msg-header-proxy.sgml:Title ##### -->
TnyMsgHeaderProxy


<!-- ##### SECTION ./tmpl/tny-summary-window-iface.sgml:Long_Description ##### -->
<para>
You can let your summary window type implement this type. Not that it defines a lot at this moment.
</para><para>
Typical implementations will go in a composition relation with a type that implements #TnyAccountStoreViewIface.
The demo-ui of tinymail, however, *is* also a #TnyAccountStoreViewIface implementation.
</para>


<!-- ##### SECTION ./tmpl/tny-summary-window-iface.sgml:See_Also ##### -->
<para>
#TnyAccountStoreViewIface, #TnyAccountStoreIface
</para>


<!-- ##### SECTION ./tmpl/tny-summary-window-iface.sgml:Short_Description ##### -->
A type that defines a summary window


<!-- ##### SECTION ./tmpl/tny-summary-window-iface.sgml:Stability_Level ##### -->



<!-- ##### SECTION ./tmpl/tny-summary-window-iface.sgml:Title ##### -->
TnySummaryWindowIface


<!-- ##### SECTION ./tmpl/tny-summary-window.sgml:Long_Description ##### -->
<para>
A demo implementation of a summary window. Implemented for Gtk+.
</para><para>
The implementation claims to also be a #TnyAccountStoreViewIface implementation.
Which is, of course, perfectly legal. It's possible that a summary window is a
view for the account store.
</para><para>
You can, however, also do it more finegrained and create a real view type that
implements the #TnyAccountStoreViewIface. And you can let the summary window
for example decorate that. Or simply goes in a composition relation with that
type. In a human language: embed the view type in the summary window.
</para><para>
The demo-ui, however, implements the summary window *as* the view type. The 
main reason for this is because that reduces the amount of code. People might
other wise get scared about having to implement a lot own GObjects if they
want to use the tinymail framework. This isn't true. 
</para><para>
But that doesn't mean the scared people are right. It's probably more correct
to implement a type as a #TnyAccountStoreViewIface and put it in composition
with the #TnySummaryWindowIface implementation.
</para><para>
Mine is just a simple demo.
</para>


<!-- ##### SECTION ./tmpl/tny-summary-window.sgml:See_Also ##### -->
<para>
#TnyAccountStoreViewIface, #TnySummaryWindowIface, #TnyAccountStoreIface
</para>


<!-- ##### SECTION ./tmpl/tny-summary-window.sgml:Short_Description ##### -->
A demo implementation of #TnySummaryWindowIface for Gtk+


<!-- ##### SECTION ./tmpl/tny-summary-window.sgml:Stability_Level ##### -->



<!-- ##### SECTION ./tmpl/tny-summary-window.sgml:Title ##### -->
TnySummaryWindow


<!-- ##### USER_FUNCTION ForgetPassFunc ##### -->
<para>

</para>

@self: 

<!-- ##### USER_FUNCTION GetPassFunc ##### -->
<para>

</para>

@self: 
@prompt: 
@Returns: 

<!-- ##### MACRO TNY_IS_MSG_PROXY_FOLDER ##### -->
<para>

</para>

@obj: 

<!-- ##### MACRO TNY_MSG_FOLDER_PROXY_TYPE ##### -->
<para>

</para>


<!-- ##### MACRO TNY_MSG_HEADER_LIST_MODEL ##### -->
<para>

</para>

@obj: 

<!-- ##### STRUCT TnyAccountTreeModelClass ##### -->
<para>

</para>

@parent_class: 

<!-- ##### USER_FUNCTION TnyGetHeadersCallback ##### -->
<para>
A callback function for tny_msg_folder_iface_refresh_headers_async that callsback when the headers are refreshed. The function is typically used for putting a tny_msg_folder_iface_get_headers in. It can for example be used for updating a header summary view.
</para>

@self: The #TnyMsgFolderIface
@cancelled: Whether or not a cancellation occured.
@user_data: user data

<!-- ##### USER_FUNCTION TnyGetHeadersStatusCallback ##### -->
<para>
A callback function for tny_msg_folder_iface_refresh_headers_async that callsback when new information about refreshing headers is available. The function is typically used for updating a progress bar or writing to a status bar.
</para>

@self: The #TnyMsgFolderIface
@what: What happened
@status: A status field
@user_data: user data

<!-- ##### STRUCT TnyMsgFolder ##### -->
<para>

</para>


<!-- ##### STRUCT TnyMsgFolderIface ##### -->
<para>

</para>


<!-- ##### SIGNAL TnyMsgFolderIface::folder-inserted ##### -->
<para>

</para>

@tnymsgfolderiface: the object which received the signal.
@arg1: 

<!-- ##### SIGNAL TnyMsgFolderIface::folders-reloaded ##### -->
<para>

</para>

@tnymsgfolderiface: the object which received the signal.

<!-- ##### STRUCT TnyMsgFolderIfaceClass ##### -->
<para>

</para>

@parent: 
@folder_inserted: 
@folders_reloaded: 
@remove_message_func: 
@expunge_func: 
@get_folders_func: 
@get_message_func: 
@get_headers_func: 
@get_name_func: 
@get_id_func: 
@get_account_func: 
@set_name_func: 
@set_id_func: 
@set_account_func: 
@get_folder_type_func: 
@get_all_count_func: 
@get_unread_count_func: 
@uncache_func: 
@has_cache_func: 
@set_subscribed_func: 
@get_subscribed_func: 
@refresh_async_func: 
@refresh_func: 

<!-- ##### STRUCT TnyMsgFolderProxy ##### -->
<para>

</para>

@parent: 
@real: 

<!-- ##### STRUCT TnyMsgHeaderListIteratorClass ##### -->
<para>

</para>

@parent: 

<!-- ##### STRUCT TnyMsgHeaderListModelClass ##### -->
<para>

</para>

@parent: 

<!-- ##### STRUCT TnySummaryWindow ##### -->
<para>

</para>

@parent: 

<!-- ##### STRUCT TnySummaryWindowIface ##### -->
<para>

</para>


<!-- ##### FUNCTION tny_account_get_type ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION tny_account_store_get_instance ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION tny_account_store_iface_get_store_accounts ##### -->
<para>

</para>

@self: 
@Returns: 

<!-- ##### FUNCTION tny_account_store_iface_get_transport_accounts ##### -->
<para>

</para>

@self: 
@Returns: 

<!-- ##### FUNCTION tny_account_tree_model_add ##### -->
<para>

</para>

@self: 
@account: 

<!-- ##### FUNCTION tny_device_get_new ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION tny_msg_folder_get_folder ##### -->
<para>

</para>

@self: 
@Returns: 

<!-- ##### FUNCTION tny_msg_folder_iface_add_folder ##### -->
<para>

</para>

@self: 
@folder: 

<!-- ##### FUNCTION tny_msg_folder_iface_has_cache ##### -->
<para>

</para>

@self: 
@Returns: 

<!-- ##### FUNCTION tny_msg_folder_iface_refresh_headers_async ##### -->
<para>

</para>

@self: 
@callback: 
@status_callback: 
@user_data: 

<!-- ##### FUNCTION tny_msg_folder_new ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION tny_msg_folder_new_with_folder ##### -->
<para>

</para>

@camel_folder: 
@Returns: 

<!-- ##### FUNCTION tny_msg_folder_proxy_new ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION tny_msg_folder_set_folder ##### -->
<para>

</para>

@self: 
@camel_folder: 

<!-- ##### FUNCTION tny_msg_header_iface_has_cache ##### -->
<para>

</para>

@self: 
@Returns: 

<!-- ##### FUNCTION tny_msg_header_iface_set_uid ##### -->
<para>

</para>

@self: 
@uid: 

<!-- ##### FUNCTION tny_msg_header_iface_uncache ##### -->
<para>

</para>

@self: 

<!-- ##### FUNCTION tny_msg_header_set_use_summary ##### -->
<para>

</para>

@self: 
@val: 

<!-- ##### FUNCTION tny_msg_iface_set_folder ##### -->
<para>

</para>

@self: 
@folder: 

<!-- ##### FUNCTION tny_msg_mime_part_iface_get_index ##### -->
<para>

</para>

@self: 
@Returns: 

<!-- ##### FUNCTION tny_msg_mime_part_iface_set_index ##### -->
<para>

</para>

@self: 
@index: 

<!-- ##### FUNCTION tny_msg_new_with_header_and_parts ##### -->
<para>

</para>

@header: 
@parts: 
@Returns: 

<!-- ##### FUNCTION tny_msg_window_iface_set_msg ##### -->
<para>

</para>

@self: 
@msg: 

<!-- ##### FUNCTION tny_session_camel_get_instance ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION tny_summary_window_new ##### -->
<para>

</para>

@Returns: 

