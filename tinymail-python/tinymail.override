/* -*- Mode: C; c-basic-offset: 4 -*- */
%%
headers
#include <Python.h>

#define NO_IMPORT_PYGOBJECT
#include "pygobject.h"
#include <tny-account-iface.h>
#include <tny-account-store-iface.h>
#include <tny-msg-folder-iface.h>
#include <tny-msg-header-iface.h>
#include <tny-msg-iface.h>
#include <tny-msg-mime-part-iface.h>
#include <tny-shared.h>
#include <tny-stream-iface.h>


/*
 This wrapper does not free the string in the list, just the list itself
 */
static PyObject *
_helper_wrap_string_glist (GList *list)
{
    GList *tmp;
    PyObject *py_list;

    if ((py_list = PyList_New(0)) == NULL) {
        g_list_free(list);
        return NULL;
    }
    for (tmp = list; tmp != NULL; tmp = tmp->next) {
        PyObject *str_obj =  PyString_FromString ((char*)tmp->data);

        if (str_obj == NULL) {
            g_list_free(list);
            Py_DECREF(py_list);
            return NULL;
        }
        PyList_Append(py_list, str_obj);
        Py_DECREF(str_obj);
    }
    g_list_free(list);
    return py_list;
}

static PyObject *
_helper_wrap_string_array (char **strings)
{
    int i;
    PyObject *py_list;

    if ((py_list = PyList_New(0)) == NULL) {
        return NULL;
    }
    
    for (i = 0; strings[i] != NULL; i++) {
        PyObject *str_obj =  PyString_FromString (strings[i]);

        if (str_obj == NULL) {
            Py_DECREF(py_list);
            return NULL;
        }
        PyList_Append(py_list, str_obj);
        Py_DECREF(str_obj);
    }
    return py_list;
}

%%
modulename tinymail
%%
ignore-glob
  *_get_type
